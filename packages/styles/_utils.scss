@import "variables";

/*  Spacing
========================================================================== */
$sides: (top, right, bottom, left);

.mx-auto {
  margin-left: auto !important;
  margin-right: auto !important;
}
.my-auto {
  margin-top: auto !important;
  margin-bottom: auto !important;
}
.ma-auto {
  margin-left: auto !important;
  margin-right: auto !important;
  margin-top: auto !important;
  margin-bottom: auto !important;
}

.mx-0 {
  margin-left: 0px !important;
  margin-right: 0px !important;
}
.my-0 {
  margin-top: 0px !important;
  margin-bottom: 0px !important;
}
.ma-0 {
  margin-left: 0px !important;
  margin-right: 0px !important;
  margin-top: 0px !important;
  margin-bottom: 0px !important;
}

.px-auto {
  padding-left: auto !important;
  padding-right: auto !important;
}
.py-auto {
  padding-top: auto !important;
  padding-bottom: auto !important;
}
.pa-auto {
  padding-left: auto !important;
  padding-right: auto !important;
  padding-top: auto !important;
  padding-bottom: auto !important;
}

.px-0 {
  padding-left: 0px !important;
  padding-right: 0px !important;
}
.py-0 {
  padding-top: 0px !important;
  padding-bottom: 0px !important;
}
.pa-0 {
  padding-top: 0px !important;
  padding-bottom: 0px !important;
  padding-left: 0px !important;
  padding-right: 0px !important;
}

// Loop spacing and create margin classes
@each $size, $space in $spacing {
  $i: index($spacing, $size $space);
  // Create (t, r, b, l) classes
  @each $marginSide in $sides {
    // if first add a 0 utility
    @if $i == 1 {
      .m#{str-slice($marginSide, 0, 1)}-auto {
        margin-#{$marginSide}: auto !important;
      }
      .m#{str-slice($marginSide, 0, 1)}-0 {
        margin-#{$marginSide}: 0px !important;
      }
    }
  }
  @each $marginSide in $sides {
    .m#{str-slice($marginSide, 0, 1)}-#{$i} {
      margin-#{$marginSide}: #{$space} !important;
    }
  }
  // Create X, Y, and A (all) classes
  .mx-#{$i} {
    margin-left: #{$space} !important;
    margin-right: #{$space} !important;
  }
  .my-#{$i} {
    margin-top: #{$space} !important;
    margin-bottom: #{$space} !important;
  }
  .ma-#{$i} {
    margin-left: #{$space} !important;
    margin-right: #{$space} !important;
    margin-top: #{$space} !important;
    margin-bottom: #{$space} !important;
  }
}

// Loop spacing and create padding classes
@each $size, $space in $spacing {
  $i: index($spacing, $size $space);
  // Create (t, r, b, l) classes
  @each $paddingSide in $sides {
    // if first add a 0 utility
    @if $i == 1 {
      .p#{str-slice($paddingSide, 0, 1)}-0 {
        padding-#{$paddingSide}: 0px !important;
      }
    }
  }
  @each $paddingSide in $sides {
    .p#{str-slice($paddingSide, 0, 1)}-#{$i} {
      padding-#{$paddingSide}: #{$space} !important;
    }
  }
  // Create X & Y classes
  .px-#{$i} {
    padding-left: #{$space} !important;
    padding-right: #{$space} !important;
  }
  .py-#{$i} {
    padding-top: #{$space} !important;
    padding-bottom: #{$space} !important;
  }
  .pa-#{$i} {
    padding-left: #{$space} !important;
    padding-right: #{$space} !important;
    padding-top: #{$space} !important;
    padding-bottom: #{$space} !important;
  }
}

/*  Positioning
========================================================================== */
.float-left {
  float: left !important;
}
.float-right {
  float: right !important;
}
.float-none {
  float: none !important;
}

/*  Text
========================================================================== */
.truncate {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
.truncate-multi {
  line-height: var(--TLineHeight, 24px);
  font-size: var(--TFontSize, 16px);
  position: relative;
  max-height: calc(var(--TLineHeight, 24px) * var(--TMaxLines, 5));
  overflow: hidden;
  // You cannot multiply {number}px * {number}px in Sass, so we are removing the "px" from the --TPadRight variable
  padding-right: calc(var(--TPosRight, 12px) * str-replace(var(--TPadRight, 8px), "px", "") + 4px) !important;

  .truncate-multi::before {
    position: absolute;
    content: "...";
    top: calc(var(--TLineHeight, 24px) * (var(--TMaxLines, 5) - 1) + var(--TFontSize, 16px) * 0.5);
    right: var(--TPosRight, 12px);
  }
}
.multi-line-truncation {
  display: -webkit-box;
  -webkit-line-clamp: var(--TMaxLineLimit, 3);
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.capitalize {
  text-transform: capitalize !important;
}
.lowercase {
  text-transform: lowercase !important;
}
.uppercase {
  text-transform: uppercase !important;
}
.bold-500 {
  font-weight: 500 !important;
}
.bold-600 {
  font-weight: 600 !important;
}
.bold-700 {
  font-weight: 700 !important;
}

/*  Display
========================================================================== */
.d-none {
  display: none !important;
}
.d-inline {
  display: inline !important;
}
.d-inline-block {
  display: inline-block !important;
}
.d-block {
  display: block !important;
}
.d-flex {
  display: flex !important;
}
.d-inline-flex {
  display: inline-flex !important;
}

/*  Flex
========================================================================== */
.flex-fill {
  flex: 1 1 auto !important;
}
.flex-row {
  flex-direction: row !important;
}
.flex-column {
  flex-direction: column !important;
}
.flex-row-reverse {
  flex-direction: row-reverse !important;
}
.flex-column-reverse {
  flex-direction: column-reverse !important;
}
.flex-grow-0 {
  flex-grow: 0 !important;
}
.flex-grow-1 {
  flex-grow: 1 !important;
}
.justify-content-start {
  justify-content: flex-start !important;
}
.justify-content-end {
  justify-content: flex-end !important;
}
.justify-content-center {
  justify-content: center !important;
}
.justify-content-between {
  justify-content: space-between !important;
}
.justify-content-around {
  justify-content: space-around !important;
}
.align-items-start {
  align-items: flex-start !important;
}
.align-items-end {
  align-items: flex-end !important;
}
.align-items-center {
  align-items: center !important;
}
.align-items-baseline {
  align-items: baseline !important;
}
.align-items-stretch {
  align-items: stretch !important;
}
.align-content-start {
  align-content: flex-start !important;
}
.align-content-end {
  align-content: flex-end !important;
}
.align-content-center {
  align-content: center !important;
}
.align-content-between {
  align-content: space-between !important;
}
.align-content-around {
  align-content: space-around !important;
}
.align-content-stretch {
  align-content: stretch !important;
}
.align-self-auto {
  align-self: auto !important;
}
.align-self-start {
  align-self: flex-start !important;
}
.align-self-end {
  align-self: flex-end !important;
}
.align-self-center {
  align-self: center !important;
}
.align-self-baseline {
  align-self: baseline !important;
}
.align-self-stretch {
  align-self: stretch !important;
}

/*  General
========================================================================== */
.cursor-pointer {
  cursor: pointer !important;
}
.overflow-auto {
  overflow: auto;
}
.overflow-hidden {
  overflow: hidden;
}
.w-25 {
  width: 25% !important;
}
.w-50 {
  width: 50% !important;
}
.w-75 {
  width: 75% !important;
}
.w-100 {
  width: 100% !important;
}
.w-auto {
  width: auto !important;
}
.h-100 {
  height: 100% !important;
}
.h-auto {
  height: auto !important;
}
.h-screen {
  min-height: 100vh !important;
}

//remove button default styles for elements that act like buttons, but don't look like them
.non-visual-button,
.non-visual-button:focus,
.non-visual-button:hover {
  background-color: transparent !important;
  border: none !important;
  cursor: pointer !important;
  font-weight: 400 !important;
}
