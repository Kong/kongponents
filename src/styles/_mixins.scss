@import "@/styles/tmp-variables";

/// Replace `$search` with `$replace` in `$string`
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
// Example Usage:
// .selector {
//   $string: 'The answer to life the universe and everything is 42.';
//   content: str-replace($string, 'e', 'xoxo');
// }
@function str-replace($string, $search, $replace: "") {
  /* stylelint-disable-next-line scss/no-global-function-names */
  $index: str-index($string, $search);

  @if $index {
    /* stylelint-disable-next-line scss/operator-no-newline-after */
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin input-default {
  background-color: var(--kui-color-background, $kui-color-background);
  box-shadow: inset 0 0 0 1px #e7e7ec !important;
  transition:
    color 0.1s ease,
    box-shadow 0.1s ease;
}

@mixin input-focus {
  box-shadow: inset 0 0 0 1px #3972d5 !important;
  outline: none !important;
  transition: all 0.1s ease;
}

@mixin textarea-default {
  background-color: var(--kui-color-background, $kui-color-background);
  box-shadow: none !important;
  transition:
    color 0.1s ease,
    box-shadow 0.1s ease;
}

@mixin textarea-hover {
  box-shadow: none !important;
  transition: all 0.1s ease;
}

@mixin textarea-focus {
  box-shadow: none !important;
  transition: all 0.1s ease;
}

@mixin input-hover {
  box-shadow: inset 0 0 0 1px #bdd3f9 !important;
  transition: all 0.1s ease;
}

@mixin input-readonly {
  background-color: #f8f8fa;
  box-shadow: inset 0 0 0 1px #e7e7ec !important;
  transition: all 0.1s ease;
}

@mixin input-disabled {
  background-color: #f8f8fa;
  box-shadow: inset 0 0 0 1px #e7e7ec !important;
  cursor: not-allowed;
  font-style: italic;
  transition: all 0.1s ease;
}

@mixin fullscreen-loading-container {
  align-items: center;
  background: var(--kui-color-background, $kui-color-background);
  bottom: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  left: 0;
  margin: 0;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 10500;
}

@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// this mixin is only meant to be used within non-visual-button mixin to avoid code duplication
@mixin non-visual-button-rules {
  background-color: var(--kui-color-background-transparent, $kui-color-background-transparent) !important;
  border: none !important;
  cursor: pointer !important;
  font-weight: var(--kui-font-weight-regular, $kui-font-weight-regular) !important;
}

@mixin non-visual-button {
  @include non-visual-button-rules;

  &:focus,
  &:hover {
    @include non-visual-button-rules;
  }
}

@mixin visually-hidden {
  border: 0 !important;
  clip: rect(0, 0, 0, 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  white-space: nowrap !important;
  width: 1px !important;
}

@mixin input-checkbox-radio {
  // Override browser defaults
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: var(--kui-color-background, $kui-color-background);
  border: var(--kui-border-width-10, $kui-border-width-10) solid
    var(--kui-color-border-neutral-weak, $kui-color-border-neutral-weak);
  box-sizing: border-box;
  display: inline-block;
  padding: var(--kui-space-0, $kui-space-0);
  -webkit-print-color-adjust: exact;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  vertical-align: middle;

  &:disabled {
    opacity: 1;

    &:hover {
      border-color: var(--kui-color-border-neutral-weak, $kui-color-border-neutral-weak);
    }
  }
}

@mixin input-type-checkbox {
  @include input-checkbox-radio;

  border: none;
  border-radius: var(--kui-border-radius-20, $kui-border-radius-20);
  color: var(--kui-color-text-primary, $kui-color-text-primary);
  height: 20px;
  margin: var(--kui-space-0, $kui-space-0) var(--kui-space-30, $kui-space-30) var(--kui-space-0, $kui-space-0)
    var(--kui-space-0, $kui-space-0);
  outline: none;
  width: 20px;

  &:not(:checked) {
    border: var(--kui-border-width-10, $kui-border-width-10) solid
      var(--kui-color-border-primary, $kui-color-border-primary);
  }

  &:checked {
    background-color: currentColor;
    background-image: url("data:image/svg+xml,%3Csvg width='13' height='11' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M10.633 0L12 1.397 3.583 10 0 6.337 1.367 4.94l2.216 2.265z' fill='%23FFF' fill-rule='nonzero'/%3E%3C/svg%3E");
    background-position: center;
    background-repeat: no-repeat;
    border-color: var(--kui-color-border-primary, $kui-color-border-primary);
  }

  &:checked::-ms-check {
    background-color: var(--kui-color-background-primary, $kui-color-background-primary);
    border: var(--kui-border-width-10, $kui-border-width-10) solid
      var(--kui-color-border-primary, $kui-color-border-primary);
    color: var(--kui-color-text-inverse, $kui-color-text-inverse);
  }

  &:hover,
  &:active {
    border-color: var(--kui-color-border-primary, $kui-color-border-primary);
  }

  &:focus {
    border-color: var(--kui-color-border-primary, $kui-color-border-primary);
    outline: none;
  }

  &:disabled:not(:checked) {
    background-color: var(--kui-color-background-disabled, $kui-color-background-disabled);
    border: var(--kui-border-width-10, $kui-border-width-10) solid
      var(--kui-color-border-neutral-weak, $kui-color-border-neutral-weak);
    border-radius: var(--kui-border-radius-10, $kui-border-radius-10);
  }
  &:disabled:checked {
    background-color: var(--kui-color-background-neutral-weak, $kui-color-background-neutral-weak);
  }
}

@mixin input-type-radio {
  @include input-checkbox-radio;

  align-items: center;
  border: var(--kui-border-width-20, $kui-border-width-20) solid
    var(--kui-color-border-neutral-weak, $kui-color-border-neutral-weak);
  border-radius: var(--kui-border-radius-circle, $kui-border-radius-circle);
  color: var(--kui-color-text-primary, $kui-color-text-primary);
  display: inline-flex;
  height: 20px;
  justify-content: center;
  margin: var(--kui-space-0, $kui-space-0) var(--kui-space-30, $kui-space-30) var(--kui-space-0, $kui-space-0)
    var(--kui-space-0, $kui-space-0);
  width: 20px;

  &:checked {
    background-color: var(--kui-color-background, $kui-color-background);
    background-position: center;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    border-color: currentColor;

    &:after {
      background-color: currentColor;
      border-radius: 100%;
      content: "";
      display: flex;
      height: 10px;
      width: 10px;
    }

    &:disabled {
      border-color: var(--kui-color-border-neutral-weak, $kui-color-border-neutral-weak);

      &:after {
        background-color: var(--kui-color-background-neutral-weak, $kui-color-background-neutral-weak);
      }
    }
  }

  // IE11
  &:checked::-ms-check {
    border: var(--kui-border-width-20, $kui-border-width-20) solid currentColor;
    color: currentColor;
  }

  &:disabled {
    background-color: var(--kui-color-background-disabled, $kui-color-background-disabled);
  }
}

@mixin input-type-input {
  &:not([type="checkbox"]):not([type="radio"]) {
    border: none;
    border-radius: var(--kui-border-radius-20, $kui-border-radius-20);
    box-sizing: border-box;
    color: var(--kui-color-text, $kui-color-text);
    display: block;
    font-size: var(--kui-font-size-40, $kui-font-size-40);
    font-weight: var(--kui-font-weight-regular, $kui-font-weight-regular);
    line-height: var(--kui-line-height-40, $kui-line-height-40);
    padding: var(--kui-space-40, $kui-space-40) var(--kui-space-60, $kui-space-60);
    width: 100%;
    @include input-default;

    &.k-input-small {
      font-size: var(--kui-font-size-20, $kui-font-size-20);
      padding: var(--kui-space-40, $kui-space-40) var(--kui-space-50, $kui-space-50);
    }

    &.k-input-large {
      font-size: var(--kui-font-size-40, $kui-font-size-40);
      padding: var(--kui-space-60, $kui-space-60) var(--kui-space-80, $kui-space-80);
    }

    &:hover {
      @include input-hover;

      &.k-input-large {
        box-shadow: inset 0 0 0 2px #bdd3f9 !important;
        transition: all $tmp-animation-timing-2 ease;
      }
    }

    &:focus {
      @include input-focus;

      &.k-input-large {
        box-shadow: inset 0 0 0 2px #3972d5 !important;
        transition: all $tmp-animation-timing-2 ease;
      }
    }

    &:not([type="checkbox"]):not([type="radio"]):not([type="file"]):read-only {
      @include input-readonly;
    }

    &:disabled {
      @include input-disabled;
    }

    &:invalid,
    &:-moz-submit-invalid,
    &:-moz-ui-invalid {
      box-shadow: none;
    }

    /* Browser Overrides */
    &::-webkit-input-placeholder,
    &::-ms-input-placeholder,
    &::-moz-placeholder,
    &::placeholder {
      color: var(--kui-color-text-disabled, $kui-color-text-disabled);
      font-weight: var(--kui-font-weight-regular, $kui-font-weight-regular);
      opacity: 1;
    }

    &::-ms-clear {
      display: none;
    }
  }
}

// in new next major version support for overlay label will be removed
// so this mixin is just holding the legacy code for a bit
@mixin overlay-label-input {
  position: relative;

  .hovered:not(.readonly) {
    color: #1155cb;
    transition: color $tmp-animation-timing-2 ease;
  }

  .focused:not(.readonly) {
    color: #1155cb;
    transition: color $tmp-animation-timing-2 ease;
  }

  .is-required {
    color: #3c4557;
    font-size: var(--kui-font-size-10, $kui-font-size-10);
    font-weight: var(--kui-font-weight-medium, $kui-font-weight-medium);
    margin-left: var(--kui-space-20, $kui-space-20);
  }

  label {
    background-color: var(--kui-color-background, $kui-color-background);
    color: #3c4557;
    display: inline-block;
    font-size: var(--kui-font-size-10, $kui-font-size-10);
    font-weight: var(--kui-font-weight-medium, $kui-font-weight-medium);
    left: 13px;
    line-height: 1;
    margin-bottom: var(--kui-space-0, $kui-space-0);
    padding: var(--kui-space-10, $kui-space-10) var(--kui-space-20, $kui-space-20);
    position: absolute;
    top: -8px;
    transition: color $tmp-animation-timing-2 ease;
    width: auto;
    z-index: 1;

    &.hovered:not(.readonly) {
      color: var(--kui-color-text-primary, $kui-color-text-primary);
      transition: color $tmp-animation-timing-2 ease;

      .is-required {
        color: var(--kui-color-text-primary, $kui-color-text-primary);
      }
    }

    &.focused:not(.readonly) {
      color: var(--kui-color-text-primary, $kui-color-text-primary);
      transition: color $tmp-animation-timing-2 ease;

      .is-required {
        color: var(--kui-color-text-primary, $kui-color-text-primary);
      }
    }

    &.disabled {
      color: #6f7787;

      .is-required {
        color: #6f7787;
      }
    }
  }
}

/* NEW MIXINS */

@mixin inputDefaults {
  -webkit-appearance: none; // need this to allow box-shadow to apply on mobile
  background-color: var(--kui-color-background, $kui-color-background);
  border: 0;
  border-radius: var(--kui-border-radius-30, $kui-border-radius-30);
  box-shadow: var(--kui-shadow-border, $kui-shadow-border);
  color: var(--kui-color-text, $kui-color-text);
  font-family: var(--kui-font-family-text, $kui-font-family-text);
  font-size: var(--kui-font-size-40, $kui-font-size-40);
  font-weight: var(--kui-font-weight-regular, $kui-font-weight-regular);
  line-height: var(--kui-line-height-40, $kui-line-height-40);
  outline: none;
  padding: var(--kui-space-40, $kui-space-40) $kInputPaddingX;
  transition: box-shadow $kongponentsTransitionDurTimingFunc;
  width: 100%;

  @media (min-width: $kui-breakpoint-mobile) {
    font-size: var(--kui-font-size-30, $kui-font-size-30);
  }

  &::placeholder {
    color: var(--kui-color-text-neutral, $kui-color-text-neutral);
  }
}

@mixin inputHover {
  box-shadow: var(--kui-shadow-border-primary-weak, $kui-shadow-border-primary-weak);
}

@mixin inputFocus {
  box-shadow: var(--kui-shadow-border-primary, $kui-shadow-border-primary), var(--kui-shadow-focus, $kui-shadow-focus);
}

// shared styles between disabled and readonly states
@mixin inputDisabledReadOnly {
  background-color: var(--kui-color-background-disabled, $kui-color-background-disabled);
  box-shadow: var(--kui-shadow-border-disabled, $kui-shadow-border-disabled);
  color: var(--kui-color-text-disabled, $kui-color-text-disabled);
}

@mixin inputDisabled {
  @include inputDisabledReadOnly;

  cursor: not-allowed;
}

@mixin inputReadOnly {
  @include inputDisabledReadOnly;
}
